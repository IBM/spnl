name: core

on:
  push:
    branches: [ main, checkingOSRunner ]
  pull_request:
    branches: [ main ]

# cancel any prior runs for this workflow and this PR (or branch)
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: read
  
env:
  CARGO_TERM_COLOR: always

jobs:
  build_and_test:
    name: core
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          # - windows-latest
          - macos-latest
    steps:
      - uses: actions/checkout@v5

      - name: download rust-cache
        run: |
          mkdir rust-cache-action && cd rust-cache-action
          mkdir -p dist/save
          (cd dist/save && wget https://raw.githubusercontent.com/Swatinem/rust-cache/refs/heads/master/dist/save/index.js)
          mkdir -p dist/restore
          (cd dist/restore && wget https://raw.githubusercontent.com/Swatinem/rust-cache/refs/heads/master/dist/restore/index.js)
          wget https://raw.githubusercontent.com/Swatinem/rust-cache/refs/heads/master/action.yml
      - uses: ./rust-cache-action

      - name: Setup protoc
        run: |
          if [ $RUNNER_OS = "Linux" ]
          then
            if [ $RUNNER_ARCH = "X64" ]
            then arch=x86_64
            elif [ $RUNNER_ARCH = "ARM64" ]
            then arch=aarch_64
            else
              echo "Unsupported arch for protoc"
              exit 1
            fi
            curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v31.1/protoc-31.1-linux-$arch.zip
          elif [ $RUNNER_OS = "macOS" ]
          then curl -L -o protoc.zip https://github.com/protocolbuffers/protobuf/releases/download/v31.1/protoc-31.1-osx-universal_binary.zip
          fi
          unzip protoc.zip -d $HOME/.local
      # - uses: Swatinem/rust-cache@v2
      # - uses: pydantic/ollama-action@v3

      - name: report cargo version
        run: cargo --version

      - name: report rustc version
        run: rustc --version

      - name: install ollama
        run: |
          if [ "$RUNNER_OS" = "Linux" ]; then
            curl -fsSL https://ollama.com/install.sh | sudo -E sh
            sleep 2
            ollama serve &
          elif [ "$RUNNER_OS" = "macOS" ]; then
            brew update
            brew install ollama
            brew services start ollama
            sleep 5
          fi

      - name: cargo test
        run: cargo test --all-features -p spnl -p spnl-cli
        
      - name: rustfmt
        run: cargo fmt --all -- --check

      - name: clippy
        run: cargo clippy --workspace --all-features --tests -- -D warnings
